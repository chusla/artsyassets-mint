/**************************************************************************
# Publish

Config := {
  placeholder: Placeholder image URI
  base: Folder root URI
  supply: Total supply of the NFT collection
}

Invite := {
  price: ETH amount in wei
  start: Unix time in seconds
  limit: Bulk purchase max limit
  cid: IPFS hash for the address array
}

## 1. Ethereum

  ### Factory

  factory.genesis(name, symbol, key, release, config)

  ### Token

  token.configure(config, frozen)
  token.mint(address, tokenIds, key, proof)


**************************************************************************/
class Base {
  constructor(abi, address, web3) {
    this.web3 = web3;
    this.abi = abi;
    this.address = address;
  }
  async init() {
    let accounts = await window.ethereum.send('eth_requestAccounts');
    this.account = accounts.result[0]
    this.contract = new this.web3.eth.Contract(this.abi, this.address);
    let methods = this.abi.filter((item) => {
      return item.type === 'function'
    })
    console.log("methods", methods)
    for(let method of methods) {
      this[method.name] = this.contract.methods[method.name]
    }
  }
  async logs(eventName, options) {
    await this.init()
    if (!eventName) eventName = "allEvents"
    console.log("eventName", eventName)
    if (!options) options = {
      fromBlock: 0,
      toBlock: 'latest'
    }
    console.log("* options", options)
    let events = await this.contract.getPastEvents(eventName, options)
    console.log("events", events)
    return events;
  }
}
class Token extends Base { }
class Factory extends Base { }
